{"version":3,"sources":["history.js","home.js","Google.js","Routes.js","serviceWorker.js","index.js"],"names":["history","App","props","state","task","tasks","handlechange","bind","handlesubmit","e","this","setState","target","value","after_list","push","console","log","id","splice","className","Button","variant","style","onClick","type","onChange","items","_handleDelete","delete","React","Component","TodoList","map","item","index","key","size","Google","error","clientId","onSuccess","onLoginSuccess","onFailure","onloginFailure","cookiePolicy","Routes","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"6QAEeA,gB,sCCITC,E,kDACF,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CAACC,KAAK,GAAGC,MAAM,IAC1B,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBAJF,E,yDAMHE,GACXC,KAAKC,SAAS,CAACP,KAAKK,EAAEG,OAAOC,U,mCAGhBJ,GACX,IAAMK,EAAWJ,KAAKP,MAAME,MAC5BS,EAAWC,KAAKL,KAAKP,MAAMC,MAC3BM,KAAKC,SAAS,CACVN,MAAOS,EACPV,KAAM,KAEVY,QAAQC,IAAIP,KAAKP,MAAME,S,6BAGpBa,GACL,IAAMJ,EAAWJ,KAAKP,MAAME,MAC5BS,EAAWK,OAAOD,EAAG,GACrBR,KAAKC,SAAS,CACVN,MAAMS,M,+BAKZ,OACE,6BACF,kBAAC,YAAD,CAAWM,UAAU,OACf,mCAEF,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASF,UAAU,OAAOG,MAAO,CAAC,MAAQ,SAAWC,QAAS,WAAQxB,EAAQe,KAAK,OAAQ,qCAE3G,8BACA,6CAEA,4BAAI,2BAAOU,KAAK,OAAOZ,MAAOH,KAAKP,MAAMC,KAAMsB,SAAUhB,KAAKJ,aAAciB,MAAO,CAAC,OAAU,UAA9F,OAEA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,OAAOF,UAAU,MAAMK,KAAK,SAAUD,QAASd,KAAKF,cAAc,6CAClF,0CACA,kBAAC,EAAD,CAAUmB,MAAOjB,KAAKP,MAAME,MAAOuB,cAAelB,KAAKmB,OAAOtB,KAAKG,e,GA5C3DoB,IAAMC,WAmDhBC,E,4KAEUd,GACVR,KAAKR,MAAM0B,cAAcV,K,+BAGnB,IAAD,OACL,OACI,4BACKR,KAAKR,MAAMyB,MAAMM,KAAI,SAACC,EAAKC,GAAN,OAClB,wBAAIC,IAAKD,GAAO,4BAAKD,EAAK,kBAACb,EAAA,EAAD,CAAQC,QAAQ,UAAUe,KAAK,KAAKjB,UAAU,SAASK,KAAK,SAASF,MAAO,CAAC,MAAQ,SAAUC,QAAS,EAAKI,cAAcrB,KAAK,EAAK4B,IAAQ,mD,GAVlKL,IAAMC,WAiBd9B,I,QCrCFqC,E,+KA7BXtB,QAAQC,IAAI,WACZjB,EAAQe,KAAK,W,qCAEAwB,GACbvB,QAAQC,IAAIsB,K,+BAIZ,OACE,kBAAC,YAAD,CAAWnB,UAAU,UAEf,6BACE,gDACE,6BAAM,kBAAC,cAAD,CACNoB,SAAS,0EACTC,UAAW/B,KAAKgC,eAChBC,UAAWjC,KAAKkC,eAChBC,aAAc,8B,GAnBTf,IAAMC,WCWZe,E,uKAVX,OACI,kBAAC,IAAD,CAAQ9C,QAASA,GACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ+C,KAAK,IAAIC,OAAK,EAACC,UAAWX,IAClC,kBAAC,IAAD,CAAOS,KAAK,SAAUE,UAAWhD,U,GANhC6B,IAAMC,WCOPmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCPNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACLvB,QAAQuB,MAAMA,EAAM2B,c","file":"static/js/main.d69d30bf.chunk.js","sourcesContent":["import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React from 'react';\r\nimport { Container} from 'react-grid-system';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport history from './history';\r\nimport './App.css';\r\nimport {Button} from 'react-bootstrap';\r\nclass App extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state={task:'',tasks:[]};\r\n      this.handlechange=this.handlechange.bind(this);\r\n      this.handlesubmit=this.handlesubmit.bind(this);\r\n      }\r\n      handlechange(e){\r\n        this.setState({task:e.target.value});\r\n      }\r\n      \r\n        handlesubmit(e) {\r\n          const after_list=this.state.tasks;\r\n          after_list.push(this.state.task);\r\n          this.setState({\r\n              tasks: after_list,\r\n              task: ''\r\n          });\r\n          console.log(this.state.tasks);\r\n      }\r\n      \r\n      delete(id){\r\n        const after_list=this.state.tasks;\r\n        after_list.splice(id,1);\r\n        this.setState({\r\n            tasks:after_list\r\n        });\r\n    }\r\n    \r\n    render(){\r\n      return(\r\n        <div>\r\n      <Container className=\"App\">\r\n            <h1>\r\n            TODO\r\n          <Button variant=\"danger\" className=\"exit\" style={{\"float\":\"right\"}}  onClick={() => { history.push('/') }}><b>Exit</b></Button>\r\n            </h1>\r\n          <form>\r\n          <h4>Got any Todo?\r\n          </h4>\r\n          <h5><input type=\"text\" value={this.state.task} onChange={this.handlechange} style={{\"height\": \"35px\"}}/>\r\n          &nbsp;\r\n          <Button variant=\"dark\" className=\"add\" type=\"button\"  onClick={this.handlesubmit}><b>#Add to TODO</b></Button></h5>   \r\n          <h4>Todo-List:</h4>\r\n          <TodoList items={this.state.tasks} _handleDelete={this.delete.bind(this)}/>\r\n          </form>\r\n       </Container>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n  class TodoList extends React.Component {\r\n\r\n    _handleDelete(id){\r\n        this.props._handleDelete(id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul>\r\n                {this.props.items.map((item,index)=> (\r\n                    <li key={index}><h5>{item}<Button variant=\"success\" size=\"sm\" className=\"delete\" type=\"button\" style={{\"float\":\"right\"}} onClick={this._handleDelete.bind(this,index)}><b>Completed</b></Button></h5></li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\n  export default App;","import React from 'react';\nimport './App.css';\nimport history from './history';\nimport {Container} from 'react-grid-system';\nimport {GoogleLogin} from 'react-google-login';\n\nclass Google extends React.Component{\n  onLoginSuccess(){\n    console.log(\"success\");\n    history.push('/home');\n  }\n  onloginFailure(error){\n    console.log(error);\n  }\n \n  render(){\n    return(\n      <Container className=\"Google\" >\n          \n            <div>\n              <h1>ToDo Application</h1>\n                <div ><GoogleLogin \n                clientId=\"88501702451-8ogt05icos9c0ui5qgkhqt7tff1eukkt.apps.googleusercontent.com\"\n                onSuccess={this.onLoginSuccess} \n                onFailure={this.onloginFailure}\n                cookiePolicy={'single_host_origin'}\n                \n                />\n            </div>\n    \t\t   </div>\n      \n      </Container>\n    )\n  }\n}\n\n\nexport default Google;\n","import { Route, Switch,Router} from 'react-router-dom';\r\nimport React from 'react';\r\nimport history from './history';\r\nimport App from './home';\r\nimport Google from './Google';\r\nclass Routes extends React.Component{\r\nrender(){\r\n    return(\r\n        <Router history={history}>\r\n                <Switch>\r\n                    <Route  path=\"/\" exact component={Google} /> \r\n                    <Route path=\"/home/\"  component={App} /> \r\n                </Switch>\r\n        </Router>\r\n    )\r\n}\r\n}\r\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\n\n \n\nReactDOM.render(\n  <HashRouter>\n    <Routes/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}